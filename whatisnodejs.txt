INTRO TO SERVER SIDE CODE

- used to dynamically display different data when needed (generally from a db stored on a server and sent to the client to be displayed via some code (HTML or JS)
- lets you tailor website content for users (dynamic sites can highlight content that's more relevant based on user habits, or store personal preferences)
- static sites = return the same hard-coded content from the server whenever a particular resource is requested
- dynamic sites = some of the response content is generated dynamically (only when needed); html pages are normally created by inserting data from a db into placeholders in html templates; most of the code to support a dynamic website must run on the server
- client side code = primarily concerned with improving appearance + behavior; server side code = primarily concerned with choosing which content is returned to the browser in response to requests (has full access to the OS)
- what you can do on the server side: efficient storage and delivery of info, customized user experience via saved info - like credit cards or recently travelled places, controlled access to content, store session/state info,push notifications and communication, data analysis from which you can refine responses (the algorithm)

WEB SERVERS AND HTTP

HTTP requests include: a target url, a method (GET, POST, HEAD-get the meta data w/ getting the body, PUT, DELETE, TRACE), additional info like url parameters, post data or client side cookies (contain session data about the client)
- AJAX = returning data to a web browser so it can dynamically update its own content

WEB FRAMEWORKS
Web frameworks can: work directly with http requests and responses (via request handlers), route requests to the appropriate handler, make it easy to access data in the request, abstract and simplify db access (abstraction layer = object relational mapper or ORM), which can do basic data validation, rendering data (by providing templating systems like the double handlebars syntax)
- django was created to support newspaper website development so it's good for blogs and other sites that involve publishing things
- flask is much lighter and great for creating web apps running on embedded devices
- opinionated frameworks = ones that have recommended 'best' ways to solve a particular problem (more productive when you're trying to solve common problem but sometimes less flexible)
- consider whether your web framework has caching support, horizontal scaling and web security

Good web frameworks examples: Django, Flask, Express, Deno (JS, provides a mechanism that naturally maintains better security), Laravel (PHP), ASP.NET (Microsoft), Spring Boot (Java) - its strength is building larger scale apps that use a cloud approach

WEBSITE SECURITY
- threats are most successful when the web app either trusts or isn't paranoid enough about the data coming from the browser
- cross site scripting (xss) = an attacker injects client-side scripts through the website and into the browsers of other users; reflected xss vulnerability happens when user content that is passed to the server is returned immediately and unmodified for display in the browser; persistent xss vulnerability happens when the malicious script is stored on the website and then later redisplayed unmodified for other users to execute unwittingly
- the data from POST or GET requests is the most common source of xss vulnerabilities; the best defense is to remove or disable any markup that can potentially contain instructions to run the code
- input sanitization = the process of changing user data so it can't be used to run scripts or affect the execution of server code (many web frameworks due this by default)
- SQL injection = an attacker executes arbitrary SQL code on a db allowing data to be accessed, changed or deleted; types include error-based, boolean error, and time-based
- SQL injection vulnerabilities are present if the user input that's passed to an underlying SQL statement can change the meaning of the statement; one way to avoid this is to escape all the characters in the user input that have a special meaning in SQL
- Cross site request forgery (CSRF) = an attacker executes actions using the credentials of another user; one way to prevent this is for the server to require requests to include a user-specific site-generated secret 
- clickjacking = attacker hijacks clicks meant for a visible top-level site and routes them to a hidden page beneath
- Dos = attackers flood a site with fake request so that access to a site is disrupted
- Directory traversal (file and disclosure) = attackers try to access parts of the web server file system that they shouldn't by using navigation characters
- file inclusion = attacker's able to specify an 'unintended' file for display or execution in data passed to the server
- command injection = attackers execute arbitrary system commands on the host OS

LESSON: NEVER TRUST DATA FROM THE BROWSER
- enable MFA
- use HTTPS and HSTS (HTTP strict transport security)
- keep track of most popular threats via OWASP list
- use vulnerability scanning tools
- only store and display data that you need (like the last 4 digits of credit card number rather than the whole thing)

WHAT IS NODE.JS
- both browser JS and Node.js run on the V8 JS runtime engine, which takes your code and converts it into faster machine code (low-level code a computer can run w/out needing to interpret it first)
- Node.js is a JS runtime built on Chrome's V8 JS engine
- it uses a non-blocking I/O model (in a blocking I/O, a second request isn't initiated until the first completes so you'd have to start a new thread for every request) - basically you can initiate requests in parallel which eliminates the need for multi-threading (which JS isn't good at anyway)

JAVASCRIPT HAS A SINGLE-THREADED EVENT LOOP
- JS has a single call stack == one thread == can do one thing at a time
- call stack is a data structure that records where in the program we are, so if we step into a function we push something onto the top of the stack, if we return from a function we pop something off the top of the stack (when you get an error, the console prints the stack trace (the state of the stack when the error happened)
- blocking = code that's slow (console.log isn't but while loops and network requests are) and on that stack
- that's a problem for JS because we're running code in browsers (you wouldn't be able to do anything while requests are processing) so the solution is asynchronous callbacks
- JS is single threaded but the browser gives us other functionality (Web API's like the DOM, setTimeout and AJAX) which are effectively threads that you can make calls to and that's where JS concurrency happens (running things in parallel)
- Web API's can't modify your stack so when they're done they push their task onto the task queue. The event loop then kicks in - it's job is to look at the V8 stack and the task queue and if the stack is empty it takes the first thing on the task queue and pushes it onto the stack (which runs it)
- so if you run set timeout with the time being 0, that's generally to defer a task until the stack is clear
- setTimeout isn't a guaranteed execution, it's a minimum time execution
- asynchronous callbacks = callbacks that are going to be pushed onto the callback queue at sometime in the future
- the browser's render queue (ideally wants to repaint the browser every 16ms) is constrained by what you're doing in JS, but is given a higher priority than your callback queue. So if you do your callbacks asynchronously you give the render a chance to work between callbacks on your queue
- don't block the event loop = don't put shitty, slow code on the stack because you block the browser from doing what it needs to do



